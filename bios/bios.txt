call:       0ffe0h
  Standard Call

ret:        0fff1h
  Standard Return


f_boot:     0ff00h
  Boot system from floppy drive.
  Args:    None
  Returns: None


f_type:     0ff03h
  Type character to console
  Args:       D - Character to type
           RE.1 - Baud constant
  Returns: None


f_read:     0ff06h
  Read character from console
  Args:    RE.1 - Baud Constant
  Returns:    D - Read Character


f_msg:      0ff09h
  Type 0 terminated message to console
  Args:      RF - Pointer to message
           RE.1 - Baud Constant
  Returns: None

f_input:    0ff0fh
  Read input line from console
  Args:      RF - Pointer to input buffer
           RE.1 - Baud Constant
  Returns: None

f_strcmp:   0ff12h
  Compare 2 strings
  Args:      RF - String 1
             RD - String 2
  Returns:    D = 0 when RF = RD
              D = -1 when RF < RD
              D = 1 when RF > RD

f_ltrim:    0ff15h
  Move pointer to first non-whitespace
  Args:      RF - pointer to string
  Returns:   RF - pointer to first non-whitespace

f_strcpy:   0ff18h
  Copy zero terminated string R[F] to R[D]
  Args:  R[F] - Source String
         R[D] - Destination String
  Returns: None

f_memcpy:   0ff1bh
  Copy R[C] bytes of memory from R[F] to R[D]
  Args: R[C] - count
        R[F] - Source
        R[D] - Destination

f_wrtsec:   equ  0ff1eh
f_rdsec:    equ  0ff21h
f_seek0:    equ  0ff24h
f_seek:     equ  0ff27h
f_drive:    equ  0ff2ah

f_setbd:    0ff2dh
  Determine terminal characteristics
  Args: None (requires input of <CR> or <LF> from console)
  Returns: RE.1 = Baud Constant

f_mul16:     equ  0ff30h
  Multiply 16-bit by 16-bit Number
  Args: RF - First Number
        RD - Second Number
  Returns: RB - Low word of answer
           RC - High word of answer

f_div16:    equ  0ff33h
  Divide 16-bit by 16-bit number
  Args - RF  - First number
         RD  - Second number
  Returns: RB - Answer
           RF - Remainder

f_idereset: 0ff36h
  Reset IDE subsystem
  Args: None
  Returns: None

f_idewrite: 0ff39h
  Write to IDE drive
  Args: R7.0 - Value for Sector Start Register
        R7.1 - Value for Cylinder Lo Register
        R8.0 - Value for Cylinder Hi Register
        R8.1 - Value for Head/Device Register
          RF - Pointer to disk transfer buffer
          R2 - Stack
  Returns: D - Controller Status Register

f_ideread:  0ff3ch
  Read from IDE drive
  Args: R7.0 - Value for Sector Start Register
        R7.1 - Value for Cylinder Lo Register
        R8.0 - Value for Cylinder Hi Register
        R8.1 - Value for Head/Device Register
          R2 - Stack
          RF - Pointer to disk transfer buffer
  Returns: D - Controller Status Register

